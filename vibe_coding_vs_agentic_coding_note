## 「Vibe coding」與「Agentic coding」兩種AI編程方式的主要異同點：

### 一、核心理念

| 項目   | Vibe Coding                        | Agentic Coding                     |
| ---- | ---------------------------------- | ---------------------------------- |
| 定義   | 以直覺和自然語言描述意圖來生成程式碼，強調人類與AI的即興互動與創作 | AI自主解讀高階目標、自動進行任務分解與執行，以最少人為干預達成目標 |
| 設計目標 | 創意探索、快速原型開發                        | 大型工程、自動化任務                         |

### 二、開發者角色

| 項目    | Vibe Coding                | Agentic Coding           |
| ----- | -------------------------- | ------------------------ |
| 開發者定位 | 直覺引導者，透過互動提示AI產生代碼，參與每一輪迭代 | 高階監督者，定義任務與驗收成果，較少直接干涉細節 |
| 人類參與度 | 高，每次互動皆需人工反饋               | 低至中，AI具高度自主性             |

### 三、互動模式

| 項目   | Vibe Coding          | Agentic Coding               |
| ---- | -------------------- | ---------------------------- |
| 互動方式 | 對話式提示與反饋，頻繁迭代，重視即時創意 | 高階任務委派，AI自主規劃並執行，僅在特定節點由人類介入 |
| 提示粒度 | 從廣泛意圖到細節修正均有         | 通常是高階目標導向，由AI細分任務            |

### 四、AI自主性

| 項目   | Vibe Coding         | Agentic Coding               |
| ---- | ------------------- | ---------------------------- |
| 自主程度 | 低到中，AI僅依開發者提示執行特定任務 | 中到高，AI能自主規劃與執行複雜任務，且具備自我修正能力 |

### 五、任務範疇

| 項目     | Vibe Coding          | Agentic Coding                |
| ------ | -------------------- | ----------------------------- |
| 適用任務類型 | 創意型、探索型任務，如原型設計、教育用途 | 結構化、規模化任務，如系統重構、CI/CD整合、自動化升級 |

### 六、工作流程

| 項目   | Vibe Coding      | Agentic Coding           |
| ---- | ---------------- | ------------------------ |
| 工作階段 | 高頻率提示-生成-觀察-修正迴圈 | 任務分解-規劃-執行-測試-自動修正迴圈     |
| 工具整合 | 輕量整合IDE、瀏覽器介面    | 深度整合工具鏈（如版本控制、自動測試、部署系統） |

### 七、錯誤處理

| 項目     | Vibe Coding     | Agentic Coding   |
| ------ | --------------- | ---------------- |
| 錯誤處理方式 | 人工主動檢測與提示AI協助修正 | AI自動檢測錯誤、主動測試與修正 |

### 八、安全性與解釋性

| 項目   | Vibe Coding           | Agentic Coding          |
| ---- | --------------------- | ----------------------- |
| 安全機制 | 較少內建安全措施，需人工驗證與外部工具輔助 | 嵌入式安全約束與執行環境隔離，具備較高的安全性 |
| 解釋能力 | 缺乏原生追溯能力，依靠人工記錄或文件    | 內建完整追蹤機制，可檢視每一步驟的AI決策過程 |

### 九、使用情境與範例

| 項目     | Vibe Coding                 | Agentic Coding                   |
| ------ | --------------------------- | -------------------------------- |
| 典型應用範例 | 快速建立個人網站、互動視覺化儀表板、原型設計、遊戲設計 | 大規模系統遷移、自動化代碼重構、依賴更新與維護、複雜系統自動測試 |

---

### 小結：

* **Vibe Coding** 重視互動性、創意性、人類高度參與，適合早期設計與探索階段。
* **Agentic Coding** 重視自主性、結構化、規模化應用，適合中後期工程實作、自動化流程。

兩者並非完全競爭關係，而是各自針對不同的開發需求與場景，甚至可結合成混合模式，以優化整體軟體開發流程。

### 參考文獻
[1] Sapkota, R., Roumeliotis, K. I., & Karkee, M. (2025). Vibe coding vs. agentic coding: Fundamentals and practical implications of agentic ai. arXiv preprint arXiv:2505.19443.
[2] Sarkar, A., & Drosos, I. (2025). Vibe coding: programming through conversation with artificial intelligence. arXiv preprint arXiv:2506.23253.
