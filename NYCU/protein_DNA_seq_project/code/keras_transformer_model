{"cells":[{"cell_type":"markdown","metadata":{"id":"ux-NO1_vCQhD"},"source":["# Protien classification with Transformer\n"]},{"cell_type":"code","source":["import os\n","import pandas as pd\n","#import pandas_profiling\n","import numpy as np\n","\n","import plotly.offline as py\n","py.init_notebook_mode(connected=True)\n","import plotly.graph_objs as go\n","import plotly.tools as tls\n","\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","from matplotlib import cm\n","sns.set_style('ticks')\n","%matplotlib inline\n","\n","import warnings\n","warnings.filterwarnings('ignore')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"yBSm146TFVmK","executionInfo":{"status":"ok","timestamp":1671255780912,"user_tz":-480,"elapsed":1007,"user":{"displayName":"tc Lin","userId":"05338448855796845949"}},"outputId":"f2ac151b-4c82-47a7-a76b-f43849a09b84"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/html":["        <script type=\"text/javascript\">\n","        window.PlotlyConfig = {MathJaxConfig: 'local'};\n","        if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\n","        if (typeof require !== 'undefined') {\n","        require.undef(\"plotly\");\n","        requirejs.config({\n","            paths: {\n","                'plotly': ['https://cdn.plot.ly/plotly-2.8.3.min']\n","            }\n","        });\n","        require(['plotly'], function(Plotly) {\n","            window._Plotly = Plotly;\n","        });\n","        }\n","        </script>\n","        "]},"metadata":{}}]},{"cell_type":"markdown","source":["### datasets\n","- pdb_data_seq.csv : https://drive.google.com/file/d/1zzEkV9b7RAOYmKKdkQbzQ4W8jxHIh60P/view?usp=share_link\n","- pdb_data_no_dups.csv : https://drive.google.com/file/d/1xPdfizGj7-tBvG6fjbnNzUmt5PBCo0xf/view?usp=share_link"],"metadata":{"id":"ZEjZddw7FDSI"}},{"cell_type":"code","source":["#線上直接下載到colab環境\n","#[安裝]gdown套件:\n","!pip install --upgrade --no-cache-dir gdown\n","\n","!gdown -q https://drive.google.com/u/1/uc?id=1zzEkV9b7RAOYmKKdkQbzQ4W8jxHIh60P&export=download\n","!gdown -q https://drive.google.com/u/1/uc?id=1xPdfizGj7-tBvG6fjbnNzUmt5PBCo0xf&export=download"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XgBa8p2WE-0R","executionInfo":{"status":"ok","timestamp":1671255798748,"user_tz":-480,"elapsed":13877,"user":{"displayName":"tc Lin","userId":"05338448855796845949"}},"outputId":"0e6931d1-5abf-4215-eb3d-2d577448e5a3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: gdown in /usr/local/lib/python3.8/dist-packages (4.4.0)\n","Collecting gdown\n","  Downloading gdown-4.6.0-py3-none-any.whl (14 kB)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.8/dist-packages (from gdown) (3.8.2)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.8/dist-packages (from gdown) (4.64.1)\n","Requirement already satisfied: requests[socks] in /usr/local/lib/python3.8/dist-packages (from gdown) (2.23.0)\n","Requirement already satisfied: six in /usr/local/lib/python3.8/dist-packages (from gdown) (1.15.0)\n","Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.8/dist-packages (from gdown) (4.6.3)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.8/dist-packages (from requests[socks]->gdown) (1.24.3)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.8/dist-packages (from requests[socks]->gdown) (3.0.4)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.8/dist-packages (from requests[socks]->gdown) (2.10)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.8/dist-packages (from requests[socks]->gdown) (2022.12.7)\n","Requirement already satisfied: PySocks!=1.5.7,>=1.5.6 in /usr/local/lib/python3.8/dist-packages (from requests[socks]->gdown) (1.7.1)\n","Installing collected packages: gdown\n","  Attempting uninstall: gdown\n","    Found existing installation: gdown 4.4.0\n","    Uninstalling gdown-4.4.0:\n","      Successfully uninstalled gdown-4.4.0\n","Successfully installed gdown-4.6.0\n"]}]},{"cell_type":"markdown","source":["### 資料前處理&EDA"],"metadata":{"id":"b6gYwlyfFMvg"}},{"cell_type":"code","source":["# Import Dataset\n","df_dup = pd.read_csv('pdb_data_no_dups.csv')\n","df_seq = pd.read_csv('pdb_data_seq.csv')\n","\n","len(df_dup), len(df_seq)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"U-r1q-LtFOJH","executionInfo":{"status":"ok","timestamp":1671255800567,"user_tz":-480,"elapsed":1822,"user":{"displayName":"tc Lin","userId":"05338448855796845949"}},"outputId":"4fee7bf2-3cce-4b14-ff68-ae91017abf00"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(141401, 467304)"]},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["# Merge the two Data set together\n","df_merge = pd.read_csv('pdb_data_no_dups.csv').merge(pd.read_csv('pdb_data_seq.csv'), how='inner', on='structureId')\n","# Drop rows with missing labels\n","df_merge = df_merge[[type(c) == type('') for c in df_merge.classification.values]]\n","df_merge = df_merge[[type(c) == type('') for c in df_merge.sequence.values]]\n","df_merge.reset_index()\n","df_merge.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"q35k-q79FaJq","executionInfo":{"status":"ok","timestamp":1671255805736,"user_tz":-480,"elapsed":2503,"user":{"displayName":"tc Lin","userId":"05338448855796845949"}},"outputId":"053e8d6f-d617-491b-87fe-d790c4b50fb1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(471117, 18)"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["# Merge the two Data set together\n","#df_merge = df_dup.merge(df_tmp ,how='inner',on='structureId')\n","df_merge.rename({'macromoleculeType_x':'macromoleculeType',\n","            'residueCount_y':'residueCount'},axis=1,inplace=True)\n","df_merge.drop(['macromoleculeType_y','residueCount_x'],axis=1,inplace=True)"],"metadata":{"id":"WAjo5XmIFda2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_merge.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZYycMiNpFgdY","executionInfo":{"status":"ok","timestamp":1671255812993,"user_tz":-480,"elapsed":514,"user":{"displayName":"tc Lin","userId":"05338448855796845949"}},"outputId":"b56e463d-f8e2-4819-f41e-345d5809c4c6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Int64Index: 471117 entries, 0 to 471148\n","Data columns (total 16 columns):\n"," #   Column                    Non-Null Count   Dtype  \n","---  ------                    --------------   -----  \n"," 0   structureId               471117 non-null  object \n"," 1   classification            471117 non-null  object \n"," 2   experimentalTechnique     471117 non-null  object \n"," 3   macromoleculeType         435372 non-null  object \n"," 4   resolution                449467 non-null  float64\n"," 5   structureMolecularWeight  471117 non-null  float64\n"," 6   crystallizationMethod     314748 non-null  object \n"," 7   crystallizationTempK      317692 non-null  float64\n"," 8   densityMatthews           389640 non-null  float64\n"," 9   densityPercentSol         389762 non-null  float64\n"," 10  pdbxDetails               385462 non-null  object \n"," 11  phValue                   340691 non-null  float64\n"," 12  publicationYear           413483 non-null  float64\n"," 13  chainId                   471107 non-null  object \n"," 14  sequence                  471117 non-null  object \n"," 15  residueCount              471117 non-null  int64  \n","dtypes: float64(7), int64(1), object(8)\n","memory usage: 61.1+ MB\n"]}]},{"cell_type":"code","source":["df_merge.head(3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":346},"id":"WqqXRb5AFkzm","executionInfo":{"status":"ok","timestamp":1671255816842,"user_tz":-480,"elapsed":481,"user":{"displayName":"tc Lin","userId":"05338448855796845949"}},"outputId":"3cf4a9b0-1703-42da-baae-66a34d9e0b9c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  structureId  classification experimentalTechnique macromoleculeType  \\\n","0        100D  DNA-RNA HYBRID     X-RAY DIFFRACTION    DNA/RNA Hybrid   \n","1        100D  DNA-RNA HYBRID     X-RAY DIFFRACTION    DNA/RNA Hybrid   \n","2        101D             DNA     X-RAY DIFFRACTION               DNA   \n","\n","   resolution  structureMolecularWeight          crystallizationMethod  \\\n","0        1.90                   6360.30  VAPOR DIFFUSION, HANGING DROP   \n","1        1.90                   6360.30  VAPOR DIFFUSION, HANGING DROP   \n","2        2.25                   7939.35                            NaN   \n","\n","   crystallizationTempK  densityMatthews  densityPercentSol  \\\n","0                   NaN             1.78              30.89   \n","1                   NaN             1.78              30.89   \n","2                   NaN             2.00              38.45   \n","\n","                              pdbxDetails  phValue  publicationYear chainId  \\\n","0  pH 7.00, VAPOR DIFFUSION, HANGING DROP      7.0           1994.0       A   \n","1  pH 7.00, VAPOR DIFFUSION, HANGING DROP      7.0           1994.0       B   \n","2                                     NaN      NaN           1995.0       A   \n","\n","       sequence  residueCount  \n","0    CCGGCGCCGG            20  \n","1    CCGGCGCCGG            20  \n","2  CGCGAATTCGCG            24  "],"text/html":["\n","  <div id=\"df-707dd6bf-8cf9-42fa-b94a-99ad631bef76\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>structureId</th>\n","      <th>classification</th>\n","      <th>experimentalTechnique</th>\n","      <th>macromoleculeType</th>\n","      <th>resolution</th>\n","      <th>structureMolecularWeight</th>\n","      <th>crystallizationMethod</th>\n","      <th>crystallizationTempK</th>\n","      <th>densityMatthews</th>\n","      <th>densityPercentSol</th>\n","      <th>pdbxDetails</th>\n","      <th>phValue</th>\n","      <th>publicationYear</th>\n","      <th>chainId</th>\n","      <th>sequence</th>\n","      <th>residueCount</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>100D</td>\n","      <td>DNA-RNA HYBRID</td>\n","      <td>X-RAY DIFFRACTION</td>\n","      <td>DNA/RNA Hybrid</td>\n","      <td>1.90</td>\n","      <td>6360.30</td>\n","      <td>VAPOR DIFFUSION, HANGING DROP</td>\n","      <td>NaN</td>\n","      <td>1.78</td>\n","      <td>30.89</td>\n","      <td>pH 7.00, VAPOR DIFFUSION, HANGING DROP</td>\n","      <td>7.0</td>\n","      <td>1994.0</td>\n","      <td>A</td>\n","      <td>CCGGCGCCGG</td>\n","      <td>20</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>100D</td>\n","      <td>DNA-RNA HYBRID</td>\n","      <td>X-RAY DIFFRACTION</td>\n","      <td>DNA/RNA Hybrid</td>\n","      <td>1.90</td>\n","      <td>6360.30</td>\n","      <td>VAPOR DIFFUSION, HANGING DROP</td>\n","      <td>NaN</td>\n","      <td>1.78</td>\n","      <td>30.89</td>\n","      <td>pH 7.00, VAPOR DIFFUSION, HANGING DROP</td>\n","      <td>7.0</td>\n","      <td>1994.0</td>\n","      <td>B</td>\n","      <td>CCGGCGCCGG</td>\n","      <td>20</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>101D</td>\n","      <td>DNA</td>\n","      <td>X-RAY DIFFRACTION</td>\n","      <td>DNA</td>\n","      <td>2.25</td>\n","      <td>7939.35</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>2.00</td>\n","      <td>38.45</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>1995.0</td>\n","      <td>A</td>\n","      <td>CGCGAATTCGCG</td>\n","      <td>24</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-707dd6bf-8cf9-42fa-b94a-99ad631bef76')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-707dd6bf-8cf9-42fa-b94a-99ad631bef76 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-707dd6bf-8cf9-42fa-b94a-99ad631bef76');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":7}]},{"cell_type":"markdown","source":["前五大類別: RIBOSOME(12.6%), HYDROLASE(10.2%), TRANSFERASE(8.1%), OXIDOREDUCTASE(7.6%), IMMUNE SYSTEM(3.3%)\n","\n","wiki-名詞解釋:\n","\n","- 核糖體(ribosome):舊稱「核糖核蛋白體」或「核蛋白體」，是細胞中的一種胞器，由一大一小兩個次單元結合形成，主要成分是相互纏繞的RNA（稱為「核糖體RNA」，ribosomal RNA，簡稱「rRNA」）和蛋白質（稱為「核糖體蛋白質」，ribosomal protein，簡稱「RP」）。\n","\n","- 水解酶(Hydrolase):是一種催化化學鍵的水解的酶。\n","\n","- 轉移酶(Transferase):是一種催化一個分子（稱為供體）的官能團（如甲基或磷酸鹽團）轉移至另一個分子（稱為受體）的酶。\n","\n","- 氧化還原酶(Oxidoreductase):是一種催化電子由一個分子傳送往另一個分子的酶。\n","\n","- 免疫系統(Immune system):是生物體體內一系列的生物學結構和進程所組成的疾病防禦系統。"],"metadata":{"id":"pvmKFz_KFqLB"}},{"cell_type":"code","source":["class_list = ['RIBOSOME','HYDROLASE','TRANSFERASE','OXIDOREDUCTASE','IMMUNE SYSTEM']\n","class_1 = df_merge.classification =='RIBOSOME'\n","class_2 = df_merge.classification =='HYDROLASE'\n","class_3 = df_merge.classification =='TRANSFERASE'\n","class_4 = df_merge.classification =='OXIDOREDUCTASE'\n","class_5 = df_merge.classification =='IMMUNE SYSTEM'"],"metadata":{"id":"Effw7SrWFmPf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#前五大類合計筆數, 佔全部資料比率\n","df_merge_sub = df_merge[class_1 + class_2 + class_3 + class_4 + class_5]\n","df_merge_sub = df_merge_sub.reset_index(drop=True)\n","len(df_merge_sub),  round(len(df_merge_sub) / len(df_merge), 4)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"t0ExffZ7Fwef","executionInfo":{"status":"ok","timestamp":1671255830327,"user_tz":-480,"elapsed":461,"user":{"displayName":"tc Lin","userId":"05338448855796845949"}},"outputId":"f3f44e03-703a-48ff-aabb-e62e0fd97032"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(197371, 0.4189)"]},"metadata":{},"execution_count":9}]},{"cell_type":"markdown","source":["### 建立模型(DL model)"],"metadata":{"id":"pG5whi6OF1gY"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"Gn-YtL9ICQhH"},"outputs":[],"source":["import tensorflow as tf\n","from tensorflow import keras\n","from tensorflow.keras import layers\n","\n","from tensorflow.keras.preprocessing import text, sequence\n","from tensorflow.keras.preprocessing.text import Tokenizer\n","from sklearn.model_selection import train_test_split"]},{"cell_type":"markdown","metadata":{"id":"P-obwOuKCQhI"},"source":["#### Implement a Transformer block as a layer"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nfZH4aj9CQhJ"},"outputs":[],"source":["class TransformerBlock(layers.Layer):\n","    def __init__(self, embed_dim, num_heads, ff_dim, rate=0.1):\n","        super(TransformerBlock, self).__init__()\n","        self.att = layers.MultiHeadAttention(num_heads=num_heads, key_dim=embed_dim)\n","        self.ffn = keras.Sequential(\n","            [layers.Dense(ff_dim, activation=\"relu\"), layers.Dense(embed_dim),]\n","        )\n","        self.layernorm1 = layers.LayerNormalization(epsilon=1e-6)\n","        self.layernorm2 = layers.LayerNormalization(epsilon=1e-6)\n","        self.dropout1 = layers.Dropout(rate)\n","        self.dropout2 = layers.Dropout(rate)\n","\n","    def call(self, inputs, training):\n","        attn_output = self.att(inputs, inputs)\n","        attn_output = self.dropout1(attn_output, training=training)\n","        out1 = self.layernorm1(inputs + attn_output)\n","        ffn_output = self.ffn(out1)\n","        ffn_output = self.dropout2(ffn_output, training=training)\n","        return self.layernorm2(out1 + ffn_output)"]},{"cell_type":"markdown","metadata":{"id":"SUPrCUvwCQhJ"},"source":["#### Implement embedding layer\n","\n","Two seperate embedding layers, one for tokens, one for token index (positions)."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"o4bQgrs_CQhK"},"outputs":[],"source":["class TokenAndPositionEmbedding(layers.Layer):\n","    def __init__(self, maxlen, vocab_size, embed_dim):\n","        super(TokenAndPositionEmbedding, self).__init__()\n","        self.token_emb = layers.Embedding(input_dim=vocab_size, output_dim=embed_dim)\n","        self.pos_emb = layers.Embedding(input_dim=maxlen, output_dim=embed_dim)\n","\n","    def call(self, x):\n","        maxlen = tf.shape(x)[-1]\n","        positions = tf.range(start=0, limit=maxlen, delta=1)\n","        positions = self.pos_emb(positions)\n","        x = self.token_emb(x)\n","        return x + positions"]},{"cell_type":"markdown","metadata":{"id":"BMxYFjoxCQhK"},"source":["#### 準備資料集"]},{"cell_type":"code","source":["from sklearn.preprocessing import LabelBinarizer\n","\n","# Transform labels to one-hot\n","lb = LabelBinarizer()\n","Y = lb.fit_transform(df_merge_sub.classification)\n","Y.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0Wud_nXSGTVo","executionInfo":{"status":"ok","timestamp":1671255858445,"user_tz":-480,"elapsed":1082,"user":{"displayName":"tc Lin","userId":"05338448855796845949"}},"outputId":"a181f688-9999-4f49-eb07-11e2f61f8499"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(197371, 5)"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["seqs = df_merge_sub.sequence.values\n","len(seqs)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0_YKoFTlGVCw","executionInfo":{"status":"ok","timestamp":1671255862180,"user_tz":-480,"elapsed":5,"user":{"displayName":"tc Lin","userId":"05338448855796845949"}},"outputId":"db12d8fd-e1ac-44a6-edff-2afc32fd9b47"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["197371"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["seqs_length = []\n","for i in range(len(seqs)):\n","    seqs_length.append(len(seqs[i]))\n","\n","print(\"sequence的長度:(最大, 最小, 平均, 標準差, 筆數)\")\n","np.max(seqs_length), np.min(seqs_length), round(np.mean(seqs_length)), round(np.std(seqs_length)), len(seqs_length)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oC0XLL4QGaYQ","executionInfo":{"status":"ok","timestamp":1671256164415,"user_tz":-480,"elapsed":486,"user":{"displayName":"tc Lin","userId":"05338448855796845949"}},"outputId":"b9746e48-fc29-422f-f87a-0bd779612c6b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["sequence的長度:(最大, 最小, 平均, 標準差, 筆數)\n"]},{"output_type":"execute_result","data":{"text/plain":["(5070, 2, 278, 289, 197371)"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["# maximum length of sequence, everything afterwards is discarded!\n","max_length = int(round(np.mean(seqs_length)) + (1*round(np.std(seqs_length)))) #seqs平均長度+seqs 1倍標準差, GPU記憶體不夠大\n","seqs = df_merge_sub.sequence.values\n","\n","print(\"設定sequence最大長度固定為:\",max_length)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"phCMm6jgHDrR","executionInfo":{"status":"ok","timestamp":1671256167251,"user_tz":-480,"elapsed":481,"user":{"displayName":"tc Lin","userId":"05338448855796845949"}},"outputId":"4baa69fd-9796-4bdc-bf76-256e8f3f2c4c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["設定sequence最大長度固定為: 567\n"]}]},{"cell_type":"code","source":["#create and fit tokenizer\n","tokenizer = Tokenizer(char_level=True)\n","tokenizer.fit_on_texts(seqs)\n","#represent input data as word rank number sequences\n","X = tokenizer.texts_to_sequences(seqs)\n","X = sequence.pad_sequences(X, maxlen=max_length)"],"metadata":{"id":"Qh7MD7NyIEdY"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#切分資料集\n","X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=.2)\n","X_train.shape, X_test.shape, y_train.shape, y_test.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MQdvWxRdIOU3","executionInfo":{"status":"ok","timestamp":1671256216611,"user_tz":-480,"elapsed":618,"user":{"displayName":"tc Lin","userId":"05338448855796845949"}},"outputId":"a7c1a213-c71f-4f33-8cf3-2d9faefdb085"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((157896, 567), (39475, 567), (157896, 5), (39475, 5))"]},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["#印出一筆訓練資料\n","X_train[0:1], X_train.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pNPdo7MGDJ7f","executionInfo":{"status":"ok","timestamp":1671256226664,"user_tz":-480,"elapsed":647,"user":{"displayName":"tc Lin","userId":"05338448855796845949"}},"outputId":"0e180f60-e4d9-498d-94c3-2f52956b08f9"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(array([[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 19, 12,  8,  3,  6,\n","          4,  6,  3,  4,  6,  7, 12, 11,  1, 17, 12,  6,  9, 16,  6,  2,\n","          2,  3,  6,  2,  3,  1,  3,  8,  8,  3, 16, 16,  5,  8,  4,  3,\n","          5,  9, 10, 12,  2, 11,  8,  1, 13,  4,  5,  6,  4,  2, 18,  3,\n","          4,  8,  4,  5,  4,  4,  5]], dtype=int32), (157896, 567))"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["y_train[0:10], y_train.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UIs8Y1WmDbOC","executionInfo":{"status":"ok","timestamp":1671256230387,"user_tz":-480,"elapsed":8,"user":{"displayName":"tc Lin","userId":"05338448855796845949"}},"outputId":"97f0bc92-dd20-456d-f192-bbb9b595b629"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(array([[0, 0, 0, 1, 0],\n","        [0, 0, 1, 0, 0],\n","        [0, 0, 1, 0, 0],\n","        [0, 0, 0, 0, 1],\n","        [0, 0, 0, 1, 0],\n","        [0, 0, 0, 1, 0],\n","        [0, 1, 0, 0, 0],\n","        [1, 0, 0, 0, 0],\n","        [0, 0, 0, 1, 0],\n","        [0, 0, 0, 0, 1]]), (157896, 5))"]},"metadata":{},"execution_count":21}]},{"cell_type":"markdown","metadata":{"id":"at0lwf8sCQhL"},"source":["#### 建立模型 (使用transformer layer)\n","Transformer layer的輸出只有一維向量，每次只輸入一筆sequence，讓模型去辨別是那一種類別.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fA81II9KCQhM"},"outputs":[],"source":["max_length = X_train.shape[1]\n","embed_dim = 32  # Embedding size for each token\n","num_heads = 5  # Number of attention heads\n","ff_dim = 32  # Hidden layer size in feed forward network inside transformer\n","vocab_size = 30\n","class_num = 5\n","\n","inputs = layers.Input(shape=(max_length,))\n","embedding_layer = TokenAndPositionEmbedding(max_length, vocab_size, embed_dim)\n","x = embedding_layer(inputs)\n","transformer_block = TransformerBlock(embed_dim, num_heads, ff_dim)\n","x = transformer_block(x)\n","x = layers.GlobalAveragePooling1D()(x)\n","x = layers.Dropout(0.1)(x)\n","x = layers.Dense(20, activation=\"relu\")(x)\n","x = layers.Dropout(0.1)(x)\n","outputs = layers.Dense(class_num, activation=\"softmax\")(x)\n","\n","model = keras.Model(inputs=inputs, outputs=outputs)"]},{"cell_type":"code","source":["model.compile(\n","    #optimizer=\"adam\", loss=\"sparse_categorical_crossentropy\", metrics=[\"accuracy\"]\n","    optimizer=\"adam\", loss=\"categorical_crossentropy\", metrics=[\"accuracy\"]\n",")"],"metadata":{"id":"E9ZpJ7_lK8Hh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VtLxErRNLO9_","executionInfo":{"status":"ok","timestamp":1671256264672,"user_tz":-480,"elapsed":22,"user":{"displayName":"tc Lin","userId":"05338448855796845949"}},"outputId":"c2411772-2d2f-4319-f8d4-63f5e62693e0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"model\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," input_1 (InputLayer)        [(None, 567)]             0         \n","                                                                 \n"," token_and_position_embeddin  (None, 567, 32)          19104     \n"," g (TokenAndPositionEmbeddin                                     \n"," g)                                                              \n","                                                                 \n"," transformer_block (Transfor  (None, 567, 32)          23232     \n"," merBlock)                                                       \n","                                                                 \n"," global_average_pooling1d (G  (None, 32)               0         \n"," lobalAveragePooling1D)                                          \n","                                                                 \n"," dropout_2 (Dropout)         (None, 32)                0         \n","                                                                 \n"," dense_2 (Dense)             (None, 20)                660       \n","                                                                 \n"," dropout_3 (Dropout)         (None, 20)                0         \n","                                                                 \n"," dense_3 (Dense)             (None, 5)                 105       \n","                                                                 \n","=================================================================\n","Total params: 43,101\n","Trainable params: 43,101\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"markdown","source":["#### 模型訓練"],"metadata":{"id":"YQeDcl-Nn8lh"}},{"cell_type":"code","source":["# tf.keras.callbacks.EarlyStopping(\n","#     monitor=\"val_loss\",\n","#     min_delta=0,\n","#     patience=0,\n","#     verbose=0,\n","#     mode=\"auto\",\n","#     baseline=None,\n","#     restore_best_weights=False,\n","# )\n","\n","callback = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=10)"],"metadata":{"id":"iDfbxe71MtZd"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Nl7NQ3_dCQhM","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671258963958,"user_tz":-480,"elapsed":2682477,"user":{"displayName":"tc Lin","userId":"05338448855796845949"}},"outputId":"f443fe0f-d357-4011-97e6-eedd3f40064f"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/100\n","309/309 [==============================] - 34s 93ms/step - loss: 1.0888 - accuracy: 0.5182 - val_loss: 0.8691 - val_accuracy: 0.6000\n","Epoch 2/100\n","309/309 [==============================] - 29s 92ms/step - loss: 0.8706 - accuracy: 0.6123 - val_loss: 0.8091 - val_accuracy: 0.6477\n","Epoch 3/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.8180 - accuracy: 0.6460 - val_loss: 0.7608 - val_accuracy: 0.6703\n","Epoch 4/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.7889 - accuracy: 0.6618 - val_loss: 0.7528 - val_accuracy: 0.6726\n","Epoch 5/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.7651 - accuracy: 0.6746 - val_loss: 0.7402 - val_accuracy: 0.6756\n","Epoch 6/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.7382 - accuracy: 0.6895 - val_loss: 0.6835 - val_accuracy: 0.7109\n","Epoch 7/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.7067 - accuracy: 0.7084 - val_loss: 0.6659 - val_accuracy: 0.7256\n","Epoch 8/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.6833 - accuracy: 0.7209 - val_loss: 0.6336 - val_accuracy: 0.7443\n","Epoch 9/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.6544 - accuracy: 0.7361 - val_loss: 0.6176 - val_accuracy: 0.7510\n","Epoch 10/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.6319 - accuracy: 0.7490 - val_loss: 0.5943 - val_accuracy: 0.7627\n","Epoch 11/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.6071 - accuracy: 0.7597 - val_loss: 0.5791 - val_accuracy: 0.7680\n","Epoch 12/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.5918 - accuracy: 0.7698 - val_loss: 0.5513 - val_accuracy: 0.7862\n","Epoch 13/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.5704 - accuracy: 0.7782 - val_loss: 0.5340 - val_accuracy: 0.7924\n","Epoch 14/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.5529 - accuracy: 0.7879 - val_loss: 0.5505 - val_accuracy: 0.7906\n","Epoch 15/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.5394 - accuracy: 0.7935 - val_loss: 0.5234 - val_accuracy: 0.8000\n","Epoch 16/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.5222 - accuracy: 0.8025 - val_loss: 0.5037 - val_accuracy: 0.8119\n","Epoch 17/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.5091 - accuracy: 0.8091 - val_loss: 0.4806 - val_accuracy: 0.8196\n","Epoch 18/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.4972 - accuracy: 0.8136 - val_loss: 0.4830 - val_accuracy: 0.8200\n","Epoch 19/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.4811 - accuracy: 0.8207 - val_loss: 0.4552 - val_accuracy: 0.8312\n","Epoch 20/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.4700 - accuracy: 0.8253 - val_loss: 0.4564 - val_accuracy: 0.8322\n","Epoch 21/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.4593 - accuracy: 0.8296 - val_loss: 0.4482 - val_accuracy: 0.8326\n","Epoch 22/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.4504 - accuracy: 0.8341 - val_loss: 0.4314 - val_accuracy: 0.8427\n","Epoch 23/100\n","309/309 [==============================] - 29s 92ms/step - loss: 0.4375 - accuracy: 0.8397 - val_loss: 0.4230 - val_accuracy: 0.8437\n","Epoch 24/100\n","309/309 [==============================] - 29s 92ms/step - loss: 0.4285 - accuracy: 0.8422 - val_loss: 0.4256 - val_accuracy: 0.8443\n","Epoch 25/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.4171 - accuracy: 0.8472 - val_loss: 0.4460 - val_accuracy: 0.8373\n","Epoch 26/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.4098 - accuracy: 0.8514 - val_loss: 0.4233 - val_accuracy: 0.8471\n","Epoch 27/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.4027 - accuracy: 0.8526 - val_loss: 0.3989 - val_accuracy: 0.8551\n","Epoch 28/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.3903 - accuracy: 0.8585 - val_loss: 0.3967 - val_accuracy: 0.8590\n","Epoch 29/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.3835 - accuracy: 0.8617 - val_loss: 0.3829 - val_accuracy: 0.8639\n","Epoch 30/100\n","309/309 [==============================] - 29s 92ms/step - loss: 0.3776 - accuracy: 0.8633 - val_loss: 0.3763 - val_accuracy: 0.8680\n","Epoch 31/100\n","309/309 [==============================] - 29s 92ms/step - loss: 0.3676 - accuracy: 0.8670 - val_loss: 0.3799 - val_accuracy: 0.8680\n","Epoch 32/100\n","309/309 [==============================] - 29s 92ms/step - loss: 0.3618 - accuracy: 0.8700 - val_loss: 0.3876 - val_accuracy: 0.8625\n","Epoch 33/100\n","309/309 [==============================] - 29s 93ms/step - loss: 0.3547 - accuracy: 0.8726 - val_loss: 0.3700 - val_accuracy: 0.8698\n","Epoch 34/100\n","309/309 [==============================] - 29s 92ms/step - loss: 0.3511 - accuracy: 0.8739 - val_loss: 0.3742 - val_accuracy: 0.8713\n","Epoch 35/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.3454 - accuracy: 0.8763 - val_loss: 0.3701 - val_accuracy: 0.8697\n","Epoch 36/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.3369 - accuracy: 0.8794 - val_loss: 0.3629 - val_accuracy: 0.8772\n","Epoch 37/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.3366 - accuracy: 0.8794 - val_loss: 0.3442 - val_accuracy: 0.8819\n","Epoch 38/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.3269 - accuracy: 0.8832 - val_loss: 0.3465 - val_accuracy: 0.8810\n","Epoch 39/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.3211 - accuracy: 0.8850 - val_loss: 0.3492 - val_accuracy: 0.8807\n","Epoch 40/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.3191 - accuracy: 0.8858 - val_loss: 0.3356 - val_accuracy: 0.8851\n","Epoch 41/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.3088 - accuracy: 0.8895 - val_loss: 0.3383 - val_accuracy: 0.8817\n","Epoch 42/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.3068 - accuracy: 0.8902 - val_loss: 0.3343 - val_accuracy: 0.8858\n","Epoch 43/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.3066 - accuracy: 0.8899 - val_loss: 0.3213 - val_accuracy: 0.8895\n","Epoch 44/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.3011 - accuracy: 0.8931 - val_loss: 0.3540 - val_accuracy: 0.8847\n","Epoch 45/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.2969 - accuracy: 0.8940 - val_loss: 0.3265 - val_accuracy: 0.8900\n","Epoch 46/100\n","309/309 [==============================] - 29s 92ms/step - loss: 0.2893 - accuracy: 0.8961 - val_loss: 0.3206 - val_accuracy: 0.8932\n","Epoch 47/100\n","309/309 [==============================] - 29s 93ms/step - loss: 0.2880 - accuracy: 0.8975 - val_loss: 0.3281 - val_accuracy: 0.8920\n","Epoch 48/100\n","309/309 [==============================] - 29s 92ms/step - loss: 0.2836 - accuracy: 0.8988 - val_loss: 0.3324 - val_accuracy: 0.8907\n","Epoch 49/100\n","309/309 [==============================] - 29s 92ms/step - loss: 0.2817 - accuracy: 0.8989 - val_loss: 0.3177 - val_accuracy: 0.8958\n","Epoch 50/100\n","309/309 [==============================] - 29s 92ms/step - loss: 0.2779 - accuracy: 0.9010 - val_loss: 0.3158 - val_accuracy: 0.8957\n","Epoch 51/100\n","309/309 [==============================] - 29s 92ms/step - loss: 0.2706 - accuracy: 0.9039 - val_loss: 0.3107 - val_accuracy: 0.8962\n","Epoch 52/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.2678 - accuracy: 0.9042 - val_loss: 0.3410 - val_accuracy: 0.8919\n","Epoch 53/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.2714 - accuracy: 0.9036 - val_loss: 0.3324 - val_accuracy: 0.8897\n","Epoch 54/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.2638 - accuracy: 0.9061 - val_loss: 0.3019 - val_accuracy: 0.8978\n","Epoch 55/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.2582 - accuracy: 0.9086 - val_loss: 0.3132 - val_accuracy: 0.9014\n","Epoch 56/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.2565 - accuracy: 0.9088 - val_loss: 0.3235 - val_accuracy: 0.8968\n","Epoch 57/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.2550 - accuracy: 0.9093 - val_loss: 0.3194 - val_accuracy: 0.8969\n","Epoch 58/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.2524 - accuracy: 0.9101 - val_loss: 0.3157 - val_accuracy: 0.9013\n","Epoch 59/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.2475 - accuracy: 0.9124 - val_loss: 0.3059 - val_accuracy: 0.9049\n","Epoch 60/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.2433 - accuracy: 0.9135 - val_loss: 0.3121 - val_accuracy: 0.9018\n","Epoch 61/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.2433 - accuracy: 0.9142 - val_loss: 0.2993 - val_accuracy: 0.9055\n","Epoch 62/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.2434 - accuracy: 0.9135 - val_loss: 0.3016 - val_accuracy: 0.9052\n","Epoch 63/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.2397 - accuracy: 0.9150 - val_loss: 0.3035 - val_accuracy: 0.9062\n","Epoch 64/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.2357 - accuracy: 0.9162 - val_loss: 0.2889 - val_accuracy: 0.9087\n","Epoch 65/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.2350 - accuracy: 0.9161 - val_loss: 0.3009 - val_accuracy: 0.9042\n","Epoch 66/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.2340 - accuracy: 0.9169 - val_loss: 0.2882 - val_accuracy: 0.9106\n","Epoch 67/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.2278 - accuracy: 0.9194 - val_loss: 0.2854 - val_accuracy: 0.9108\n","Epoch 68/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.2277 - accuracy: 0.9195 - val_loss: 0.2944 - val_accuracy: 0.9091\n","Epoch 69/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.2248 - accuracy: 0.9198 - val_loss: 0.3025 - val_accuracy: 0.9097\n","Epoch 70/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.2241 - accuracy: 0.9203 - val_loss: 0.2977 - val_accuracy: 0.9102\n","Epoch 71/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.2189 - accuracy: 0.9216 - val_loss: 0.2833 - val_accuracy: 0.9111\n","Epoch 72/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.2197 - accuracy: 0.9220 - val_loss: 0.2926 - val_accuracy: 0.9083\n","Epoch 73/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.2203 - accuracy: 0.9215 - val_loss: 0.3055 - val_accuracy: 0.9109\n","Epoch 74/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.2167 - accuracy: 0.9225 - val_loss: 0.2910 - val_accuracy: 0.9134\n","Epoch 75/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.2119 - accuracy: 0.9247 - val_loss: 0.2956 - val_accuracy: 0.9129\n","Epoch 76/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.2144 - accuracy: 0.9233 - val_loss: 0.2885 - val_accuracy: 0.9132\n","Epoch 77/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.2118 - accuracy: 0.9241 - val_loss: 0.2937 - val_accuracy: 0.9099\n","Epoch 78/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.2085 - accuracy: 0.9254 - val_loss: 0.2904 - val_accuracy: 0.9113\n","Epoch 79/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.2100 - accuracy: 0.9248 - val_loss: 0.2819 - val_accuracy: 0.9164\n","Epoch 80/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.2035 - accuracy: 0.9269 - val_loss: 0.2946 - val_accuracy: 0.9117\n","Epoch 81/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.2048 - accuracy: 0.9270 - val_loss: 0.2896 - val_accuracy: 0.9163\n","Epoch 82/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.2027 - accuracy: 0.9276 - val_loss: 0.3087 - val_accuracy: 0.9120\n","Epoch 83/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.2012 - accuracy: 0.9282 - val_loss: 0.3041 - val_accuracy: 0.9125\n","Epoch 84/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.2031 - accuracy: 0.9277 - val_loss: 0.2778 - val_accuracy: 0.9180\n","Epoch 85/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.2002 - accuracy: 0.9283 - val_loss: 0.3020 - val_accuracy: 0.9139\n","Epoch 86/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.1964 - accuracy: 0.9289 - val_loss: 0.2853 - val_accuracy: 0.9155\n","Epoch 87/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.1958 - accuracy: 0.9300 - val_loss: 0.3011 - val_accuracy: 0.9137\n","Epoch 88/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.1944 - accuracy: 0.9302 - val_loss: 0.2938 - val_accuracy: 0.9147\n","Epoch 89/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.1919 - accuracy: 0.9312 - val_loss: 0.2828 - val_accuracy: 0.9207\n","Epoch 90/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.1953 - accuracy: 0.9297 - val_loss: 0.2940 - val_accuracy: 0.9187\n","Epoch 91/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.1917 - accuracy: 0.9310 - val_loss: 0.2969 - val_accuracy: 0.9160\n","Epoch 92/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.1928 - accuracy: 0.9305 - val_loss: 0.3111 - val_accuracy: 0.9086\n","Epoch 93/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.1913 - accuracy: 0.9316 - val_loss: 0.2847 - val_accuracy: 0.9207\n","Epoch 94/100\n","309/309 [==============================] - 28s 92ms/step - loss: 0.1869 - accuracy: 0.9324 - val_loss: 0.2813 - val_accuracy: 0.9219\n"]}],"source":["%%time\n","try:\n","\n","  hitory = model.fit(X_train, y_train, batch_size=512, epochs=100, validation_data=(X_test, y_test), callbacks=[callback])\n","\n","except KeyboardInterrupt:\n","    print(\"KeyboardInterrupt\")"]},{"cell_type":"markdown","source":["### 模型評估"],"metadata":{"id":"aEb_rDW1MJN2"}},{"cell_type":"code","source":["from sklearn.metrics import confusion_matrix\n","from sklearn.metrics import accuracy_score\n","from sklearn.metrics import classification_report\n","import itertools\n","\n","train_pred = model.predict(X_train)\n","test_pred = model.predict(X_test)\n","print(\"train-acc = \" + str(accuracy_score(np.argmax(y_train, axis=1), np.argmax(train_pred, axis=1))))\n","print(\"test-acc = \" + str(accuracy_score(np.argmax(y_test, axis=1), np.argmax(test_pred, axis=1))))\n","\n","# Compute confusion matrix\n","cm = confusion_matrix(np.argmax(y_test, axis=1), np.argmax(test_pred, axis=1))\n","\n","# Plot normalized confusion matrix\n","cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n","np.set_printoptions(precision=2)\n","plt.figure(figsize=(10,10))\n","plt.imshow(cm, interpolation='nearest', cmap=plt.cm.Blues)\n","plt.title('Confusion matrix')\n","plt.colorbar()\n","tick_marks = np.arange(len(lb.classes_))\n","plt.xticks(tick_marks, lb.classes_, rotation=90)\n","plt.yticks(tick_marks, lb.classes_)\n","\n","for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n","    plt.text(j, i, format(cm[i, j], '.2f'), horizontalalignment=\"center\", color=\"white\" if cm[i, j] > cm.max() / 2. else \"black\")\n","\n","plt.ylabel('True label')\n","plt.xlabel('Predicted label')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":708},"id":"rUTZmQmsC7Rr","executionInfo":{"status":"ok","timestamp":1671258994238,"user_tz":-480,"elapsed":28897,"user":{"displayName":"tc Lin","userId":"05338448855796845949"}},"outputId":"53751949-cfe3-4b5a-98c8-4988b2b4816c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["4935/4935 [==============================] - 21s 4ms/step\n","1234/1234 [==============================] - 5s 4ms/step\n","train-acc = 0.9418794649642803\n","test-acc = 0.9218746041798607\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 720x720 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["#Print F1 score metrics\n","print(classification_report(np.argmax(y_test, axis=1), np.argmax(test_pred, axis=1), target_names=lb.classes_))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qDLP7RDTDrQQ","executionInfo":{"status":"ok","timestamp":1671258994239,"user_tz":-480,"elapsed":20,"user":{"displayName":"tc Lin","userId":"05338448855796845949"}},"outputId":"bfec7945-23c9-4fd5-b7c8-2da313eb92e6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["                precision    recall  f1-score   support\n","\n","     HYDROLASE       0.90      0.88      0.89      9529\n"," IMMUNE SYSTEM       0.92      0.89      0.90      3191\n","OXIDOREDUCTASE       0.95      0.89      0.92      6976\n","      RIBOSOME       0.98      0.99      0.98     12152\n","   TRANSFERASE       0.84      0.92      0.88      7627\n","\n","      accuracy                           0.92     39475\n","     macro avg       0.92      0.91      0.91     39475\n","  weighted avg       0.92      0.92      0.92     39475\n","\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import seaborn as sns\n","%matplotlib inline\n","from matplotlib import cm\n","sns.set_style('ticks')\n","import plotly.offline as py\n","py.init_notebook_mode(connected=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"cDnK5W1AMV8R","executionInfo":{"status":"ok","timestamp":1671258994239,"user_tz":-480,"elapsed":17,"user":{"displayName":"tc Lin","userId":"05338448855796845949"}},"outputId":"76403d61-bf08-47f6-fc78-515842cd1653"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/html":["        <script type=\"text/javascript\">\n","        window.PlotlyConfig = {MathJaxConfig: 'local'};\n","        if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\n","        if (typeof require !== 'undefined') {\n","        require.undef(\"plotly\");\n","        requirejs.config({\n","            paths: {\n","                'plotly': ['https://cdn.plot.ly/plotly-2.8.3.min']\n","            }\n","        });\n","        require(['plotly'], function(Plotly) {\n","            window._Plotly = Plotly;\n","        });\n","        }\n","        </script>\n","        "]},"metadata":{}}]},{"cell_type":"code","source":["# Compute confusion matrix\n","cm = confusion_matrix(np.argmax(y_test, axis=1), np.argmax(test_pred, axis=1))\n","# Plot normalized confusion matrix\n","cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]"],"metadata":{"id":"hrMSEbi1MZue"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["colormap = plt.cm.RdBu\n","f, ax = plt.subplots(figsize=(6,5))\n","sns.heatmap(cm,cmap= colormap,annot=True,ax=ax,annot_kws ={'fontsize':12})\n","kwargs= {'length':3, 'width':1, 'colors':'black','labelsize':13}\n","ax.tick_params(**kwargs)\n","ax.tick_params(**kwargs,axis='x')\n","plt.title ('Confusion matrix', color = 'black',fontsize=18)\n","\n","plt.tight_layout()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":369},"id":"lz9EwPRZMcLX","executionInfo":{"status":"ok","timestamp":1671258995045,"user_tz":-480,"elapsed":821,"user":{"displayName":"tc Lin","userId":"05338448855796845949"}},"outputId":"8cb4fcdb-2697-4f54-8a8e-560e92b791cb"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x360 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["### 儲存模型權重\n","使用HDF5檔"],"metadata":{"id":"MP3k3cHtDqkI"}},{"cell_type":"code","source":["model.save_weights('keras_transformer_model_weights.h5') # HDF5 file"],"metadata":{"id":"Ycz2HL-dMjhX"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"provenance":[{"file_id":"https://github.com/keras-team/keras-io/blob/master/examples/nlp/ipynb/text_classification_with_transformer.ipynb","timestamp":1671246190815}],"machine_shape":"hm"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.11"},"accelerator":"GPU","gpuClass":"premium"},"nbformat":4,"nbformat_minor":0}